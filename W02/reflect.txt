/*
*****************************************************************************
                        Workshop2 - Part2
Full Name  : Chaerin Yoo
Student ID#: 102998234
Email      : cyoo10@myseneca.ca
Section    : NCC

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

In this workshop 3, I learned a lot about how to use dynamic memory with pointers and how to allocate it. Most programs and code put a lot of effort into memory allocation to make dynamic memory allocation more efficient. This is very important for programmers to flexibly set up this memory space when developing programs, because every application and program has its own memory space. During this workshop, I learned more about memory allocation through my assignments. I also learned that I should try to use an allocation method that uses less computer RAM to prevent memory leaks while deallocating memory. And if I use arbitrarily large numbers when I size an array in the workshop, this would be a huge waste of memory. But it was a problem that would be solved by just using 'new' to allocate that number of memories. All I could do is "employees= new Employee[noOfemployee]" or "employee.m_name=new char[Strlen(name)+1]." Note that when you allocate a character array, I have to allocate one more space than the string size. This is to enter the null value at the end. And most importantly, if I allocated dynamic memory at the end, I have to delete the allocated memory before shutting it down. If I didn't delete the memory, I would get a memory leak error, so you had to use it carefully.
At first, it was difficult for me to understand the dynamic allocation and memory of functions. So in this task, I had a hard time figuring out which parameters to use. But I was able to solve the problem through the information and explanations given. I used parameters like "boload(employee&employee)" and "boload(char*EmpName)." So I used out parameters more in this workshop. It's useful that I can use the function while overwriting the values of the parameters, so I can access the address directly. In conclusion, I was able to solve the workshop by using out parameters at the same time as implementing the overload function.